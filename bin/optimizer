#!/usr/bin/env node

/*jshint node:true, regexp:false*/

'use strict';

var fs = require('fs'),
    program = require('commander'),
    esprima = require('esprima'),
    escodegen = require('escodegen'),
    Syntax = esprima.Syntax;

////////////////////////////////////////////////////

program
    .usage('< file.js > optimized_file.js')
    .version('0.1.1')
    .parse(process.argv);

////////////////////////////////////////////////////

var parser = {
    /**
     * Run the callback foreach dejavu usage.
     * The callback will receive an object containing a type and the ast.
     * The type is either interface, abstract or concrete.
     *
     * @param {Object}   ast      The ast
     * @param {Function} callback The callback
     */
    forEachUsage: function (ast, callback) {
        var queue = [ast],
            curr,
            objectName,
            x,
            keys,
            props;

        while (queue.length) {
            curr = queue.pop();

            if (curr) {
                if (curr.type === Syntax.CallExpression &&
                    curr.callee.type === Syntax.MemberExpression &&
                    curr.callee.property.type === Syntax.Identifier &&
                    curr['arguments'].length && curr['arguments'][0].type === Syntax.ObjectExpression) {

                    objectName = curr.callee.object.type === 'MemberExpression' ? curr.callee.object.property.name : curr.callee.object.name;

                    // Obvious usage
                    if (curr.callee.property.name === 'declare') {
                        if (objectName === 'Interface') {
                            callback({ type: 'interface', ast: curr });
                        } else if (objectName === 'AbstractClass') {
                            callback({ type: 'abstract', ast: curr });
                        } else if (objectName === 'Class' || objectName === 'FinalClass') {
                            callback({ type: 'concrete', ast: curr });
                        }
                    // Usage with extend
                    } else if (curr.callee.property.name === 'extend') {
                        props = curr['arguments'][0].properties;

                        if (parser._isInterface(props)) {
                            callback({ type: 'interface', ast: curr });
                        } else if (parser._isAbstractClass(props)) {
                            callback({ type: 'abstract', ast: curr });
                        } else if (parser._isClass(props)) {

                            callback({ type: 'concrete', ast: curr });
                        } else {
                            process.stderr.write('Could not guess if it is a dejavu usage (add a $name property?)\n');
                        }
                    }
                }

                if (Object.prototype.toString.call(curr) === '[object Array]') {
                    for (x = curr.length - 1; x >= 0; x -= 1) {
                        queue.push(curr[x]);
                    }
                } else if (curr.type) {
                    keys = Object.keys(curr);

                    for (x = keys.length - 1; x >= 0; x -= 1) {
                        queue.push(curr[keys[x]]);
                    }
                }
            }
        }
    },

    /**
     * Optimizes an interface.
     * The ast will be directly modified.
     *
     * @param {Object} ast The interface ast
     */
    optimizeInterface: function (ast) {
        // Step 1
        // Remove all the functions
        var asts = ast['arguments'][0].properties,
            x,
            curr;

        for (x = asts.length - 1; x >= 0; x -= 1) {
            curr = asts[x];

            if (curr.value.type === Syntax.FunctionExpression) {
                asts.splice(x, 1);
            }
        }

        // Step 2
        // Remove $name and $statics
        parser._removeProperties(asts, ['$name', '$statics']);
    },

    /**
     * Optimizes an abstract classs.
     * This just removes the abstract members.
     * You should call optimizeClass() after.
     * The ast will be directly modified.
     *
     * @param {Object} ast The abstract class ast
     */
    optimizeAbstractClass: function (ast) {
        // Step 1
        // Remove abstracts
        // Beware that we need to preserve functions that have .$bound()
        var asts = ast['arguments'][0].properties,
            curr,
            x;

        for (x = asts.length - 1; x >= 0; x -= 1) {
            curr = asts[x];

            if (curr.key.name === '$abstracts' && curr.value.type === Syntax.ObjectExpression) {
                parser._removeAbstractFunctions(curr.value.properties);
                if (!curr.value.properties.length) {
                    asts.splice(x, 1);
                }

                break;
            }
        }
    },

    /**
     * Optimizes a concrete class.
     * The ast will be directly modified.
     *
     * @param {Object} ast The class ast
     */
    optimizeClass: function (ast) {
        var args = ast['arguments'],
            type = ast.callee.property.name,
            extend,
            funcExpression,
            canBeOptimized;

        // Step 1
        // Convert the object to a return function with the magical $ params
        funcExpression = {
            type: Syntax.FunctionExpression,
            id: null,
            params: [],
            body: {
                type: Syntax.BlockStatement,
                body: [
                    {
                        type: Syntax.ReturnStatement
                        // Return object will be here as the argument key
                    }
                ]
            }
        };

        if (type === 'extend' || (extend = parser._getExtends(args[0]))) {
            funcExpression.params.push(
                {
                    type: Syntax.Identifier,
                    name: '$super'
                },
                {
                    type: Syntax.Identifier,
                    name: '$self'
                },
                {
                    type: Syntax.Identifier,
                    name: '$parent'
                }
            );

            if (type !== 'extend') {
                parser._removeExtends(args[0]);
                ast['arguments'] = [
                    {
                        type: 'Identifier',
                        name: extend
                    },
                    funcExpression
                ];
            } else {
                ast['arguments'] = [funcExpression];
            }
        } else {
            funcExpression.params.push(
                {
                    type: Syntax.Identifier,
                    name: '$self'
                }
            );
            ast['arguments'] = [funcExpression];
        }

        funcExpression.body.body[0].argument = args[0];

        // Step 2
        // Replace all the this.$super / this.$static / this.$self accordingly
        // Be aware that depending on the context (normal or static, things must be adapted)
        canBeOptimized = parser._findAndParseFunctions(args[0].properties);

        // Step 3
        // Add a true flag if the constructor can be optimized
        // and remove the $super and $parent that was previously added
        if (canBeOptimized) {
            ast['arguments'].push({
                type: 'Literal',
                value: true
            });
            funcExpression.params.splice(1, 2);
        }

        // Step 4
        // Remove $name and $locked
        parser._removeProperties(args[0].properties, ['$name', '$locked']);
    },

    /**
     * Optimizes the ast passed in the object according to the type.
     * Used as the callback for forEachUsage.
     *
     * @param {Object} obj The object containing the type and the ast
     */
    optimize: function (obj) {
        var type = obj.type,
            ast = obj.ast;

        // Detect and make the optimizations according to the type
        if (type === 'concrete') {
            parser.optimizeClass(ast);
        } else if (type === 'abstract') {
            parser.optimizeAbstractClass(ast);
            parser.optimizeClass(ast);
        } else if (type === 'interface') {
            parser.optimizeInterface(ast);
        }
    },

    /**
     * Checks if the passed asts (members) are part of an interface.
     *
     * @param  {Array} asts The asts
     *
     * @return {Boolean} True if it is, false otherwise
     */
    _isInterface: function (asts) {
        var x,
            curr;

        // Every single function must be empty
        // Also all the properties must be functions except a few ones ($extends, $name, $static)
        for (x = asts.length - 1; x >= 0; x -= 1) {
            curr = asts[x];

            if (curr.key.name === '$name' || curr.key.name === '$extends') {
                continue;
            }

            if (curr.key.name === '$statics') {
                if (!parser._isInterface(curr.value)) {
                    return false;
                }
            } else if (curr.type === Syntax.FunctionExpression) {
                if (curr.body.body.length) {
                    return false;
                }
            } else {
                return false;
            }
        }

        return true;
    },

    /**
     * Checks if the passed asts (members) are part of an abstract class.
     *
     * @param  {Array} asts The asts
     *
     * @return {Boolean} True if it is, false otherwise
     */
    _isAbstractClass: function (asts) {
        // Check if it has an $abstracts
        var x,
            curr;

        for (x = asts.length - 1; x >= 0; x -= 1) {
            curr = asts[x];

            if (curr.key.name === '$abstracts') {
                return true;
            }
        }

        return false;
    },

    /**
     * Checks if the passed asts (members) are part of a concrete class.
     *
     * @param  {Array} asts The asts
     *
     * @return {Boolean} True if it is, false otherwise
     */
    _isClass: function (asts) {
        // Check if it has a $name, $statics, $finals, $constants
        var x,
            curr,
            known = ['$name', '$statics', '$finals', '$constants'];

        for (x = asts.length - 1; x >= 0; x -= 1) {
            curr = asts[x];

            if (known.indexOf(curr.key.name) !== -1) {
                return true;
            }
        }

        return false;
    },

    /**
     * Removes the given properties from the ast.
     * The original ast will be modified.
     *
     * @param {Array} asts       The asts
     * @param {Array} properties The properties to remove
     */
    _removeProperties: function (asts, properties) {
        var x;

        for (x = asts.length - 1; x >= 0; x -= 1) {
            if (properties.indexOf(asts[x].key.name) !== -1) {
                asts.splice(x, 1);
            }
        }

        return asts;
    },

    /**
     * Removes all abstract functions of an abstract class.
     * All $bound functions will be kept.
     * The original asts array will be modified.
     *
     * @param {Array} asts The asts
     */
    _removeAbstractFunctions: function (asts) {
        var x,
            curr;

        for (x = asts.length - 1; x >= 0; x -= 1) {
            curr = asts[x];

            if (curr.key.name === '$statics' && curr.value.type === Syntax.ObjectExpression) {
                parser._removeAbstractFunctions(curr.value.properties);
                if (!curr.value.properties.length) {
                    asts.splice(x, 1);
                }
            } else if (curr.value.type === Syntax.FunctionExpression) {
                asts.splice(x, 1);
            }
        }

        return asts;
    },

    /**
     * Finds and parses a concrete class functions in order to optimize them.
     * All super and self calls will be replaced with their efficient counterpart.
     *
     * @param {Array}   asts     The functions asts
     * @param {Boolean} isStatic True if in static context, false otherwise
     *
     * @return {Boolean} True if the constructor can be optimized, false otherwise
     */
    _findAndParseFunctions: function (asts, isStatic) {
        if (Object.prototype.toString.call(asts) !== '[object Array]') {
            return false;
        }

        var x,
            curr,
            currFuncName,
            canBeOptimized = true,
            ret;

        for (x = asts.length - 1; x >= 0; x -= 1) {
            curr = asts[x];
            ret = null;

            if (curr.key.name === '$statics') {
                ret = parser._findAndParseFunctions(curr.value.properties, true);
            } else if (curr.key.name === '$finals') {
                ret = parser._findAndParseFunctions(curr.value.properties);
            } else if (curr.value.type === Syntax.FunctionExpression) {
                currFuncName = curr.key.name;
                ret = parser._replaceSpecial(currFuncName, curr, isStatic);

            }

            if (ret === false) {
                canBeOptimized = false;
            }
        }

        return canBeOptimized;
    },

    /**
     * Replaces a function usage of keywords for their effiecient counterparts.
     * Basically the this.$super and this.$self will be optimized.
     *
     * @param {String} funcName The function name
     * @param {Object} ast      The function ast
     * @param {Boolean} isStatic True if in static context, false otherwise
     *
     * @return {Boolean} False if this functions causes the constructor to not be optimized, false otherwise
     */
    _replaceSpecial: function (funcName, ast, isStatic) {
        var code = escodegen.generate(ast.value, { comment: true }),
            canBeOptimized = true;

        function superStaticReplacer() {
            canBeOptimized = false;
            return '$parent';
        }

        function selfReplacer() {
            canBeOptimized = false;
            return '$self';
        }

        if (!isStatic && funcName === ('_initialize' || funcName === '__initialize')) {
            funcName = 'initialize';
        }

        // Super replacement
        code = code.replace(/(this|that|_this)(?:\.|(?:[\'])?)\$super(?:'\])?\(/g, '$super.' + funcName + '.call($1, ')
                   .replace(/(this|that|_this), \)/g, '$1)');

        // If on static context, $super is actually $parent
        if (isStatic) {
            code = code.replace(/\$super/g, superStaticReplacer);
        }

        // Self replacement
        code = code.replace(/(this|that|_this)(?:\.|(?:[\'])?)\$self(?:'\])?/g, selfReplacer);

        // $bind replacement
        /*code = code.replace(/\.\$bind\(/g, function (match, offset) {
            return !/(that|this|_this)$/.test(code.substr(offset - 5, 5)) ? '.bind(' : '.$bind(';
        });*/

        code = code.replace(/function\s*\(/, 'function x(');
        ast.value = esprima.parse(code).body[0];
        ast.value.id = null;
        ast.value.type = Syntax.FunctionExpression;

        return canBeOptimized;
    },

    /**
     * Grabs and returns the $extends of an ast.
     *
     * @param {Function} ast The ast
     *
     * @return {String} The $extends
     */
    _getExtends: function (ast) {
        var x,
            length = ast.properties.length;

        for (x = 0; x < length; x += 1) {
            if (ast.properties[x].key.name === '$extends') {
                return escodegen.generate(ast.properties[x].value, { comment: true });
            }
        }
    },

    /**
     * Removes $extends of an ast.
     *
     * @param {Function} ast The ast
     */
    _removeExtends: function (ast) {
        var x,
            length = ast.properties.length;

        for (x = 0; x < length; x += 1) {
            if (ast.properties[x].key.name === '$extends') {
                ast.properties.splice(x, 1);
                break;
            }
        }
    }
};

var len = fs.fstatSync(process.stdin.fd).size,
    contents = len > 0 ? fs.readSync(process.stdin.fd, len)[0] : '',
    ast,
    output;

// Read and get an ast
ast = esprima.parse(contents, { comment: true });

parser.forEachUsage(ast, function (obj) {
    parser.optimize(obj);
});

// Generate the source
output = escodegen.generate(ast, { comment: true });

// Output contents
process.stdout.write(output);
//process.stdout.write(JSON.stringify(ast, null, '    '));
